"""
Page Streamlit pour le recommandeur bas√© sur le contenu
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import json
import os
import sys
from datetime import datetime

# Ajouter le chemin racine au PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from AI.recommender.content_based.food_recommender import ContentBasedRecommender
from AI.recommender.content_based.data_loader import ContentBasedDataLoader
from aws_s3.connect_s3 import S3Manager

# Configuration de la page
st.set_page_config(
    page_title="IM - Content Based Recommender",
    page_icon="üìä",
    layout="wide"
)

def load_model_stats():
    """Charge les statistiques du mod√®le depuis S3"""
    try:
        s3_manager = S3Manager()
        response = s3_manager.s3_client.get_object(
            Bucket=s3_manager.bucket_name,
            Key='AI/recommender/content_based/results/stats.json'
        )
        return json.loads(response['Body'].read().decode('utf-8'))
    except Exception as e:
        st.error(f"Erreur lors du chargement des statistiques : {str(e)}")
        return None

def load_example_recommendations():
    """Charge les recommandations d'exemple depuis S3"""
    try:
        s3_manager = S3Manager()
        response = s3_manager.s3_client.get_object(
            Bucket=s3_manager.bucket_name,
            Key='AI/recommender/content_based/results/recommendations.json'
        )
        return json.loads(response['Body'].read().decode('utf-8'))
    except Exception as e:
        st.error(f"Erreur lors du chargement des recommandations : {str(e)}")
        return None

def plot_feature_distributions(food_features):
    """Cr√©e des visualisations des distributions des caract√©ristiques"""
    numeric_cols = ['calories', 'lipides', 'glucides', 'proteines', 'fibres', 'sucres', 'sodium']
    
    # Cr√©er une figure avec subplots
    fig = go.Figure()
    
    for col in numeric_cols:
        # Ajouter un violin plot pour chaque caract√©ristique
        fig.add_trace(go.Violin(
            y=food_features[col],
            name=col.capitalize(),
            box_visible=True,
            meanline_visible=True
        ))
    
    fig.update_layout(
        title="Distribution des caract√©ristiques nutritionnelles",
        yaxis_title="Valeur",
        showlegend=False,
        height=500
    )
    
    return fig

def plot_food_type_distribution(food_features):
    """Cr√©e un graphique de la distribution des types d'aliments"""
    type_counts = food_features['Type'].value_counts()
    
    fig = px.pie(
        values=type_counts.values,
        names=type_counts.index,
        title="Distribution des types d'aliments"
    )
    
    fig.update_layout(height=500)
    return fig

def plot_feature_correlations(food_features):
    """Cr√©e une heatmap des corr√©lations entre caract√©ristiques"""
    # S√©lectionner uniquement les nutriments principaux
    main_nutrients = ['calories', 'proteines', 'glucides', 'lipides']
    corr_matrix = food_features[main_nutrients].corr()
    
    fig = go.Figure(data=go.Heatmap(
        z=corr_matrix,
        x=main_nutrients,
        y=main_nutrients,
        colorscale='RdBu',
        zmid=0
    ))
    
    fig.update_layout(
        title="Corr√©lations entre les nutriments principaux",
        height=500
    )
    
    return fig

def main():
    st.title("üìä Recommandeur Bas√© sur le Contenu")
    
    # Charger les donn√©es et statistiques
    data_loader = ContentBasedDataLoader()
    food_features, user_preferences = data_loader.load_training_data()
    model_stats = load_model_stats()
    example_recommendations = load_example_recommendations()
    
    # V√©rifier si le mod√®le a √©t√© entra√Æn√©
    if model_stats is None:
        st.warning("‚ö†Ô∏è Le mod√®le n'a pas encore √©t√© entra√Æn√©. Veuillez lancer l'entra√Ænement avec la commande : `python -m AI.recommender.content_based.training.train_model`")
    
    # Section d'introduction
    st.markdown("""
    Le recommandeur bas√© sur le contenu utilise les caract√©ristiques nutritionnelles et les types d'aliments
    pour g√©n√©rer des recommandations personnalis√©es. Il analyse le profil nutritionnel des aliments que vous
    aimez pour sugg√©rer des aliments similaires.
    """)
    
    # M√©triques principales
    if model_stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "MAE",
                f"{model_stats['model_metrics']['content_based']['mae']:.3f}",
                help="Erreur absolue moyenne entre les pr√©dictions et les vraies pr√©f√©rences"
            )
        
        with col2:
            st.metric(
                "RMSE",
                f"{model_stats['model_metrics']['content_based']['rmse']:.3f}",
                help="Racine de l'erreur quadratique moyenne"
            )
        
        with col3:
            st.metric(
                "Couverture",
                f"{model_stats['model_metrics']['content_based']['coverage']:.1f}%",
                help="Pourcentage d'aliments que le mod√®le peut recommander"
            )
        
        with col4:
            st.metric(
                "Utilisateurs",
                f"{model_stats['general_statistics']['total_users']:,}",
                help="Nombre total d'utilisateurs dans le syst√®me"
            )
        
        # Afficher les statistiques du mod√®le
        st.header("üìà Statistiques du Mod√®le")
        
        # Ajouter une section d'explication des m√©triques
        with st.expander("‚ÑπÔ∏è Comprendre les M√©triques", expanded=True):
            st.markdown("""
            ### Guide d'Interpr√©tation des M√©triques
            
            #### MAE (Mean Absolute Error)
            - **√âchelle** : 0 √† 5 (m√™me √©chelle que les ratings)
            - **Interpr√©tation** :
                - 0.0 - 0.5 : Excellent - Pr√©dictions tr√®s pr√©cises
                - 0.5 - 1.0 : Bon - Pr√©dictions fiables
                - 1.0 - 2.0 : Moyen - Pr√©dictions approximatives
                - > 2.0 : Faible - Pr√©dictions peu fiables
            
            #### RMSE (Root Mean Square Error)
            - **√âchelle** : 0 √† 5
            - **Interpr√©tation** :
                - 0.0 - 0.7 : Excellent - Pr√©dictions tr√®s stables
                - 0.7 - 1.2 : Bon - Erreurs bien contr√¥l√©es
                - 1.2 - 2.0 : Moyen - Pr√©sence d'erreurs importantes
                - > 2.0 : Faible - Erreurs tr√®s variables
            - *Note* : Le RMSE est toujours ‚â• MAE. Un grand √©cart entre les deux indique des erreurs de pr√©diction tr√®s variables.
            
            #### Couverture (Coverage)
            - **√âchelle** : 0% √† 100%
            - **Interpr√©tation** :
                - 90% - 100% : Excellent - Recommandations tr√®s diversifi√©es
                - 70% - 90% : Bon - Bonne diversit√©
                - 50% - 70% : Moyen - Diversit√© limit√©e
                - < 50% : Faible - Recommandations trop restreintes
            """)
    
    # Visualisations
    st.header("Analyse des Donn√©es")
    
    if food_features is not None:
        tab1, tab2, tab3 = st.tabs([
            "Distribution des Caract√©ristiques",
            "Types d'Aliments",
            "Corr√©lations"
        ])
        
        with tab1:
            st.plotly_chart(
                plot_feature_distributions(food_features),
                use_container_width=True
            )
            
        with tab2:
            st.plotly_chart(
                plot_food_type_distribution(food_features),
                use_container_width=True
            )
            
        with tab3:
            st.plotly_chart(
                plot_feature_correlations(food_features),
                use_container_width=True
            )
    
    # Exemples de recommandations
    st.header("Exemples de Recommandations")
    
    if example_recommendations:
        # S√©lection de l'utilisateur
        user_ids = list(example_recommendations.keys())
        selected_user = st.selectbox(
            "S√©lectionner un utilisateur",
            user_ids,
            format_func=lambda x: f"Utilisateur {x}"
        )
        
        if selected_user:
            recs = example_recommendations[selected_user]
            
            # Afficher les recommandations dans un tableau
            if recs:
                df_recs = pd.DataFrame(recs)
                df_recs['Similarit√©'] = df_recs['similarity'].apply(lambda x: f"{x:.2%}")
                
                st.dataframe(
                    df_recs[['Nom', 'Type', 'Similarit√©']],
                    use_container_width=True
                )
            else:
                st.info("Pas de recommandations disponibles pour cet utilisateur")
    
    # Section technique
    st.header("D√©tails Techniques")
    
    with st.expander("Comment fonctionne le recommandeur bas√© sur le contenu ?"):
        st.markdown("""
        Le recommandeur bas√© sur le contenu fonctionne en plusieurs √©tapes :
        
        1. **Pr√©paration des donn√©es**
           - Extraction des caract√©ristiques nutritionnelles
           - Encodage des types d'aliments
           - Normalisation des valeurs num√©riques
        
        2. **Cr√©ation des profils**
           - Calcul des vecteurs de caract√©ristiques pour chaque aliment
           - Cr√©ation des profils utilisateurs bas√©s sur leurs pr√©f√©rences
        
        3. **G√©n√©ration des recommandations**
           - Calcul de la similarit√© entre le profil utilisateur et les aliments
           - S√©lection des aliments les plus similaires
           - Filtrage des aliments d√©j√† consomm√©s
        
        4. **√âvaluation**
           - Calcul des m√©triques de performance (MAE, RMSE)
           - Analyse de la couverture du syst√®me
           - Validation sur un ensemble de test
        """)
    
    # Footer avec timestamp
    st.markdown("---")
    if model_stats:
        st.caption(
            f"Derni√®re mise √† jour du mod√®le : "
            f"{datetime.fromisoformat(model_stats['general_statistics']['timestamp']).strftime('%d/%m/%Y %H:%M')}"
        )

if __name__ == "__main__":
    main()
